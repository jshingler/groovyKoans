/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'jshingler' at '11/10/13 8:57 PM' with Gradle 1.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.8/userguide/tutorial_java_projects.html
 */

/* */
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "eclipse"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'
    // mandatory dependencies for using Spock
    // groovy "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.0"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'passed'
    }
}

test {
    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}


task truthKoan(type: Test, dependsOn: testClasses) {
    include '**/*TruthKoan*'
}

task stringKoan(type: Test, dependsOn: testClasses) {
    include '**/*StringKoan*'
}

task dateKoan(type: Test, dependsOn: testClasses) {
    include '**/*DateKoan*'
}

task rangesKoan(type: Test, dependsOn: testClasses) {
    include '**/*RangesKoan*'
}

task collectionsKoan(type: Test, dependsOn: testClasses) {
    include '**/*CollectionsKoan*'
}

task operatorOverloadingKoan(type: Test, dependsOn: testClasses) {
    include '**/*OperatorOverloadingKoan*'
}

task groovyKoans(dependsOn: ["truthKoan", "stringKoan", "dateKoan", "rangesKoan", "collectionsKoan", "operatorOverloadingKoan"]) {}
tasks.stringKoan.mustRunAfter truthKoan
tasks.operatorOverloadingKoan.mustRunAfter collectionsKoan
tasks.collectionsKoan.mustRunAfter rangesKoan
tasks.rangesKoan.mustRunAfter dateKoan
tasks.dateKoan.mustRunAfter stringKoan


/* */
